
log_format bodylog escape=$LOG_FORMAT_ESCAPE $LOG_FORMAT;

access_log  /dev/stdout  bodylog;

server {
    listen $OWN_PORT;

    lua_need_request_body on;
    set $resp_body "";
    set $real_log_max_body_length $LOG_MAX_BODY_LENGTH;
    body_filter_by_lua '
        local lua_resp_body = string.sub(ngx.arg[1], 1, ngx.var.real_log_max_body_length)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. lua_resp_body
        if ngx.arg[2] then
            ngx.var.resp_body = ngx.ctx.buffered
        end
    ';

    set_by_lua_block $requ_headers{
        local h = ngx.req.get_headers()
        local requ_headers_all = ""
        for k, v in pairs(h) do
            local rowtext = ""
            rowtext = string.format("[%s %s]\n", k, v)
            requ_headers_all = requ_headers_all .. rowtext

        end
        return requ_headers_all
    }
    
    # for a discussion why resp_headers_short and resp_headers_full are different
    # see https://github.com/openresty/lua-nginx-module/issues/1595#issuecomment-530597829
    set_by_lua_block $resp_headers_short{
        local lua_resp_headers_short = ""
        for k, v in pairs(ngx.resp.get_headers()) do
            lua_resp_headers_short = lua_resp_headers_short .. k.."="..v.." "
        end
        return lua_resp_headers_short
    }
    
    set $resp_headers_full "resp_headers_full is disabled until I have figured out why it sometimes changes the content";
    header_filter_by_lua '
        -- for k, v in pairs(ngx.resp.get_headers()) do
        --    ngx.var.resp_headers_full = ngx.var.resp_headers_full .. k.."="..v.." "
        -- end
    ';

    $EXTRA_DIRECTIVES_SERVER

    location / {
        proxy_pass http://$TARGET_HOST:$TARGET_PORT/;
        $DEFAULT_DIRECTIVES_PROXY
        $EXTRA_DIRECTIVES_LOCATION
    }
}